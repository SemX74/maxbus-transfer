import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";

const TELEGRAM_BOT_TOKEN = "7867579875:AAG-HEL84euP691fyRBDGCYMU6OrwCJKeQw";
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || "590861634";

// Zod schema for form validation
const bookingSchema = z.object({
  route: z.string().min(1, "–ú–∞—Ä—à—Ä—É—Ç —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º"),
  date: z.string().min(1, "–î–∞—Ç–∞ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ—é"),
  time: z.string().min(1, "–ß–∞—Å —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º"),
  name: z.string().min(2, "–Ü–º'—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏"),
  phone: z
    .string()
    .regex(/^\+380\d{9}$/, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (+380XXXXXXXXX)"),
  passengers: z
    .number()
    .min(1, "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Å–∞–∂–∏—Ä—ñ–≤ –º–∞—î –±—É—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 1")
    .max(50, "–ú–∞–∫—Å–∏–º—É–º 50 –ø–∞—Å–∞–∂–∏—Ä—ñ–≤"),
  email: z
    .string()
    .email("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É")
    .optional()
    .or(z.literal("")),
  comments: z.string().optional(),
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();

    // Validate the data
    const validatedData = bookingSchema.parse(body);

    // Format the message
    const message = `üöê –ù–û–í–ê –ó–ê–Ø–í–ö–ê

–ú–∞—Ä—à—Ä—É—Ç: ${validatedData.route}
–î–∞—Ç–∞: ${validatedData.date}
–ß–∞—Å: ${validatedData.time}
–Ü–º'—è: ${validatedData.name}
–ü–∞—Å–∞–∂–∏—Ä—ñ–≤: ${validatedData.passengers}${
      validatedData.email ? `\nEmail: ${validatedData.email}` : ""
    }${validatedData.comments ? `\n–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ: ${validatedData.comments}` : ""}

üëâ –ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏: ${validatedData.phone}`;

    // Create inline keyboard with messaging options
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "üí¨ WhatsApp",
            url: `https://wa.me/${validatedData.phone.replace("+", "")}`,
          },
        ],
      ],
    };

    // Send message to Telegram
    const response = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
          reply_markup: keyboard,
          parse_mode: "HTML",
        }),
      }
    );

    if (!response.ok) {
      const errorData = await response.json();
      console.error("Telegram API error:", errorData);
      throw new Error(
        `Telegram API error: ${errorData.description || "Unknown error"}`
      );
    }

    const result = await response.json();
    console.log("Message sent successfully:", result);

    return NextResponse.json({
      success: true,
      message: "–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!",
    });
  } catch (error) {
    console.error("Error sending to Telegram:", error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          success: false,
          message: "–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º–∏",
          errors: error.errors,
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      {
        success: false,
        message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
      },
      { status: 500 }
    );
  }
}
